// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

WHITESPACE = _ { !NEWLINE ~ WHITE_SPACE }
COMMENT = _ { "##" ~ (!NEWLINE ~ ANY)* ~ TrailingWS }

Document = {
      Header
    ~ Block*
    ~ EOI
}

//
// Header Items
//

Header = {
    SOI
    ~ DocumentProps
    ~ "---" ~ TrailingWS
}

DocumentProps = {
    DocumentProp*
}

DocumentProp = {
    Key ~ (KeyToVal ~ DocumentPropValue)? ~ TrailingWS
}

DocumentPropValue = { HeaderText }

//
// Block items
//

Block = _{
      (("#-" ~ BlockTag) | ("#=" ~ LiteralTag) | (!"#:" ~ Paragraph))
    ~ TrailingWS
}

BlockTag = ${
      Key
    ~ ("[" ~ Props? ~ "]")?
    ~ ( (PUSH(":" ~ (!WHITE_SPACE ~ ANY)*)
         ~ TrailingWS
         ~ Block*
         ~ "#"
         ~ POP)
      | ("{" ~ Paragraph? ~ "}")
      )?
}

LiteralTag = ${
      Key
    ~ ("[" ~ Props? ~ "]")?
    ~ PUSH(":" ~ (!WHITE_SPACE ~ ANY)*)
    ~ NEWLINE
    ~ Literal
    ~ WHITE_SPACE*
    ~ LiteralEnd
}

Literal = @{
    ((!(("#" ~ PEEK) | NEWLINE) ~ ANY)* ~ NEWLINE)*
}

LiteralEnd = _ {
    "#" ~ POP
}

Paragraph = ${
    Inline ~ (SoftBreak? ~ Inline)*
}

//
// Inline items
//

Inline = _{
    EscapedPlainText | InlineTag | PlainText
}

InlineTag = ${
    !("#" ~ (":" | "+" | "-" | "#"))
    ~ "#"
    ~ Key
    ~ ("[" ~ Props? ~ "]")?
    ~ ("{" ~ Paragraph? ~ "}")?
}

SoftBreak = @{ NEWLINE ~ (!NEWLINE ~ WHITE_SPACE)* }

//
// Tags
//

Props = !{
    Prop ~ ("," ~ Prop)*
}

Prop = {
    Key ~ (KeyToVal ~ QuotedText)?
}

QuotedText = {
    PUSH("\"" | "'")
    ~ (PlainQuotedText | EscapedQuotedText)*
    ~ POP
}

PlainQuotedText = @{
    (!(PEEK | "\\") ~ ANY)+
}


EscapedQuotedText = @{
    "\\" ~ (PEEK | "\\")
}


//
// Terminal elements
//

Key = @ {
    !KeyInitReserved ~ ANY
    ~ (!KeyReserved ~ ANY)*
}

KeyToVal = _{
    ":" | "="
}

PlainText = @{
    (!Reserved ~ ANY)+
}

HeaderText = _ {
    (PlainText | EscapedPlainText)+
}

//
// Text classes
//

EscapedPlainText = @{
    "\\" ~ ( "\\" | "n" | "#" | "{" | "}" )
}

Reserved = _ {
    "\\" | "#" | "{" | "}" | NEWLINE
}

KeyReserved = _ {
    Reserved
    | WHITE_SPACE
    | "[" | "]"
    | ":" | "="
    | "\"" | ","
}

// FIXME: I haven't fully decided if I should even restrict this. XML requires
// tags to start with underscore or a word char, but as much as XML inspired
// Prosidy's AST I'm not sure some of it's arbitrary syntax rules are a good
// fit.
KeyInitReserved = _ {
    KeyReserved
    | '1' .. '9'
    | "-"
}

TrailingWS = _ { NEWLINE ~ WHITE_SPACE* }
